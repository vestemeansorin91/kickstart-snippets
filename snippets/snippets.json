{
  "Resolver | BE @anaisdigital": {
    "prefix": "ks-resolver",
    "body": [
      "import { crud } from 'src/app/graphql/crud';",
      "import { Resolver } from 'type-graphql';",
      "",
      "",
      "@crud(${1:Model}, ${1:Model}Service, [",
      "  { type: ResolverOperationType.Create, inputType: ${1:Model}CreateInput, permissions: [Permissions.Create${1:Model}] },",
      "  { type: ResolverOperationType.Retrieve, isPublic: true },",
      "  { type: ResolverOperationType.Update, inputType: ${1:Model}UpdateInput, permissions: [Permissions.Update${1:Model}] },",
      "  { type: ResolverOperationType.Delete, permissions: [Permissions.Delete${1:Model}] }",
      "])",
      "@provide(${1:Model}Resolver)",
      "@Resolver(${1:Model})",
      "export class ${1:Model}Resolver {",
      "  constructor(@inject(${1:Model}Service) public ${2:model}Service: ${1:Model}Service) {}",
      "}",
      ""
    ],
    "description": "Resolver | BE @anaisdigital"
  },
  "Resolver Translatable | BE @anaisdigital": {
    "prefix": "ks-resolver-translatable",
    "body": [
      "import { FieldResolver, Resolver, Root } from 'type-graphql';",
      "",
      "@translatableCrud(${1:Model}, ${1:Model}Service, [",
      "  {",
      "    type: ResolverOperationType.Create,",
      "    inputType: ${1:Model}CreateInput,",
      "    permissions: [Permissions.Create${1:Model}]",
      "  },",
      "  { type: ResolverOperationType.Retrieve, permissions: [Permissions.Retrieve${1:Model}] },",
      "  {",
      "    type: ResolverOperationType.Update,",
      "    inputType: ${1:Model}UpdateInput,",
      "    permissions: [Permissions.Update${1:Model}]",
      "  },",
      "  { type: ResolverOperationType.Delete, permissions: [Permissions.Delete${1:Model}] },",
      "  { type: ResolverOperationType.DeleteTranslations, permissions: [Permissions.Delete${1:Model}] }",
      "])",
      "@provide(${1:Model}Resolver)",
      "@Resolver(${1:Model})",
      "export class ${1:Model}Resolver {",
      "  constructor(@inject(${1:Model}Service) public ${2:model}Service: ${1:Model}Service) {}",
      "",
      "  @FieldResolver()",
      "  public async translations(@Root() ${2:model}: ${1:Model}): Promise<Translation[]> {",
      "    return this.${2:model}Service.getTranslations(${2:model}._id as any);",
      "  }",
      "}",
      ""
    ],
    "description": "Resolver Translatable | BE @anaisdigital"
  },
  "Service | BE @anaisdigital": {
    "prefix": "ks-be-service",
    "body": [
      "@provide(${1:Model}Service)",
      "export class ${1:Model}Service extends BaseService<${1:Model}> {",
      "  constructor(@inject(${1:Model}Mapper) protected mapper: IEntityMapper<${1:Model}> & ${1:Model}Mapper) {",
      "    super();",
      "  }",
      "}",
      ""
    ],
    "description": "Service | BE @anaisdigital"
  },
  "Service Multilanguage | BE @anaisdigital": {
    "prefix": "ks-be-service-multilanguage",
    "body": [
      "@provide(${1:Model}Service)",
      "export class ${1:Model}Service extends MultiLanguageService<${1:Model}> {",
      "  constructor(@inject(${1:Model}Mapper) protected mapper: IMultiLanguageMapper<${1:Model}> & ${1:Model}Mapper) {",
      "    super();",
      "  }",
      "}",
      ""
    ],
    "description": "Service Multilanguage | BE @anaisdigital"
  },
  "Mapper | BE @anaisdigital": {
    "prefix": "ks-be-mapper",
    "body": [
      "@provide(${1:Model}Mapper)",
      "export class ${1:Model}Mapper extends BaseMapper<${1:Model}> {",
      "  protected model: typeof ${1:Model} = ${1:Model};",
      "}",
      ""
    ],
    "description": "Mapper | BE @anaisdigital"
  },
  "Mapper MultiLanguage | BE @anaisdigital": {
    "prefix": "ks-be-mapper-multilanguage",
    "body": [
      "@provide(${1:Model}Mapper)",
      "export class ${1:Model}Mapper extends MultiLanguageMapper<${1:Model}> {",
      "  protected model: typeof ${1:Model} = ${1:Model};",
      "}",
      ""
    ],
    "description": "Mapper MultiLanguage | BE @anaisdigital"
  },
  "Service | FE @anaisdigital": {
    "prefix": "ks-fe-service",
    "body": [
      "import gql from 'graphql-tag';",
      "",
      "import { Injectable } from '@angular/core';",
      "",
      "@Injectable()",
      "export class ${1:Model}Service extends CrudService<${1:Model}, ${1:Model}CreateInput, ${1:Model}UpdateInput> {",
      "  public fragment: any;",
      "  public modelName: string = '${1:Model}';",
      "",
      "  constructor() {",
      "    super();",
      "    this.setFragment();",
      "  }",
      "",
      "  public setFragment(fragment?: any): void {",
      "    this.fragment =",
      "      fragment ||",
      "      gql`",
      "        fragment fields on ${1:Model} {",
      "          _id",
      "        }",
      "      `;",
      "  }",
      "}",
      ""
    ],
    "description": "Service | FE @anaisdigital"
  },
  "Service Translatable | FE @anaisdigital": {
    "prefix": "ks-fe-service-translatable",
    "body": [
      "import gql from 'graphql-tag';",
      "",
      "import { Injectable } from '@angular/core';",
      "",
      "@Injectable()",
      "export class ${1:Model}Service extends TranslatableCrudService<${1:Model}, ${1:Model}CreateInput, ${1:Model}UpdateInput> {",
      "  public fragment: any;",
      "  public modelName: string = '${1:Model}';",
      "",
      "  constructor() {",
      "    super();",
      "    this.setFragment();",
      "  }",
      "",
      "  public setFragment(fragment?: any): void {",
      "    this.fragment =",
      "      fragment ||",
      "      gql`",
      "        fragment fields on ${1:Model} {",
      "          _id",
      "        }",
      "      `;",
      "  }",
      "}",
      ""
    ],
    "description": "Service Translatable | FE @anaisdigital"
  },
  "Store List | FE @anaisdigital": {
    "prefix": "ks-store-list",
    "body": [
      "import { observable } from 'mobx';",
      "",
      "import { Injectable } from '@angular/core';",
      "",
      "@Injectable()",
      "export class ListCategoriesStore extends BaseListStore<${1:Model}, ${1:Model}CreateInput, ${1:Model}UpdateInput> {",
      "  @observable",
      "  public collection: Collection<${1:Model}> = new Collection<${1:Model}>();",
      "",
      "  @observable",
      "  public filteredCollection: Collection<${1:Model}> = new Collection<${1:Model}>();",
      "",
      "  public pagination: PaginationInput = {",
      "    page: 0,",
      "    perPage: 10,",
      "    sizeOptions: [5, 10, 20, 50]",
      "  };",
      "",
      "  constructor(protected service: ${1:Model}Service) {",
      "    super(service);",
      "  }",
      "}",
      ""
    ],
    "description": "Store List | FE @anaisdigital"
  },
  "Store Dialog | FE @anaisdigital": {
    "prefix": "ks-store-dialog",
    "body": [
      "import { observable } from 'mobx';",
      "",
      "import { Injectable } from '@angular/core';",
      "",
      "@Injectable()",
      "export class ${1:Model}DialogStore extends BaseItemTranslatableStore<${1:Model}, ${1:Model}CreateInput, ${1:Model}UpdateInput> {",
      "  @observable",
      "  public item: ${1:Model} = new ${1:Model}();",
      "",
      "  @observable",
      "  public ${2:model}Collection: Collection<${1:Model}> = new Collection<${1:Model}>();",
      "",
      "  constructor(protected service: ${1:Model}Service) {",
      "    super(service);",
      "  }",
      "}",
      ""
    ],
    "description": "Store Dialog | FE @anaisdigital"
  },
  "Model | BE @anaisdigital": {
    "prefix": "ks-be-model",
    "body": [
      "import { Types } from 'mongoose';",
      "import { Field, ID, ObjectType } from 'type-graphql';",
      "import { prop, Typegoose } from 'typegoose';",
      "",
      "@ObjectType()",
      "export class ${1:Model} extends Typegoose {",
      "  @Field(type => ID)",
      "  @prop()",
      "  public _id: Types.ObjectId;",
      "}",
      ""
    ],
    "description": "Model | BE @anaisdigital"
  },
  "Model MultiLanguage | BE @anaisdigital": {
    "prefix": "ks-be-model-multilanguage",
    "body": [
      "import { Types } from 'mongoose';",
      "import { Field, ID, ObjectType } from 'type-graphql';",
      "import { prop } from 'typegoose';",
      "",
      "@ObjectType()",
      "export class ${1:Model} extends MultiLanguageModel {",
      "  @Field(type => ID)",
      "  @prop()",
      "  public _id: Types.ObjectId;",
      "}",
      ""
    ],
    "description": "Model MultiLanguage | BE @anaisdigital"
  },
  "Table Config | FE @anaisdigital": {
    "prefix": "ks-table-config",
    "body": [
      "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';",
      "import { MatDialog } from '@angular/material';",
      "",
      "@Component({",
      "  selector: 'anais-list-${2:model}s',",
      "  templateUrl: './list-${2:model}s.component.html',",
      "  styleUrls: ['./list-${2:model}s.component.scss', '../../../../../shared/helpers/table-styles.scss'],",
      "  changeDetection: ChangeDetectionStrategy.OnPush,",
      "  animations",
      "})",
      "export class List${1:Model}sComponent implements OnInit {",
      "  public Permissions: typeof Permissions = Permissions;",
      "  public config: IAdminListTableConfig;",
      "  public displayedColumns: string[] = ['checkbox', '$4', 'buttons'];",
      "",
      "  constructor(public store: List${1:Model}sStore, public dialog: MatDialog) {}",
      "",
      "  public async ngOnInit(): Promise<void> {",
      "    this.setConfig();",
      "  }",
      "",
      "  protected buildData(${2:model}?: ${1:Model}): any {",
      "    const entity = Object.assign(new ${1:Model}(), ${2:model} ? {} : {});",
      "    return { entity, toUpdate: !!${2:model} };",
      "  }",
      "",
      "  private setFields(): void {",
      "    this.store.collection.items.forEach(${2:model} => {});",
      "  }",
      "",
      "  private get permissions(): { [action: string]: string[] } {",
      "    return {",
      "      create: [this.Permissions.Create${1:Model}],",
      "      update: [this.Permissions.Update${1:Model}],",
      "      delete: [this.Permissions.Delete${1:Model}]",
      "    };",
      "  }",
      "",
      "  private setConfig(): void {",
      "    this.config = {",
      "      context: '${3:CONTEXT}',",
      "      icon: '${2:model}',",
      "      displayedColumns: this.displayedColumns,",
      "      store: this.store,",
      "      columns: {",
      "        ${4:columnName}: {",
      "          label: '',",
      "          sort: true,",
      "          hasPropertyValue: true",
      "        }",
      "      },",
      "      dialogService: this.dialog,",
      "      dialogComponent: ${1:Model}DialogComponent,",
      "      buildData: this.buildData.bind(this),",
      "      permissions: this.permissions,",
      "      modalWidth: '${5:number}vw',",
      "      hasBulkActions: true",
      "      // OPTIONAL",
      "      // bulkActions: {",
      "      //   method: (${2:model}: ${1:Model}) => this.customMethod(${2:model}),",
      "      //   icon: '',",
      "      //   // OPTIONAL",
      "      //   permissions: [],",
      "      //   label: '',",
      "      //   class: ''",
      "      // },",
      "      // rowActions: {",
      "      //   block: {",
      "      //     icon: '',",
      "      //     method: (${2:model}: ${1:Model}) => this.customMethod(${2:model}),",
      "      //     tooltip: ''",
      "      //     // OPTIONAL",
      "      //     condition: (${2:model}: ${1:Model}) => this.customCondition();",
      "      //     class: '',",
      "      //     permissions: [],",
      "      //     shouldRefresh: true",
      "      //   }",
      "      // },",
      "      // processData: this.setFields.bind(this),",
      "      // hasGeneralSearch: true,",
      "      // hasDynamicColumns: true,",
      "      // customTitle: '',",
      "      // customCSS: ''",
      "    };",
      "  }",
      "}",
      ""
    ],
    "description": "Table Config | FE @anaisdigital"
  }
}
