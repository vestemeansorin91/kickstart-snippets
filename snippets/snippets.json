{
  "Resolver | BE @anaisdigital": {
    "prefix": "ks-resolver",
    "body": [
      "import { crud } from 'src/app/graphql/crud';",
      "import { ResolverOperationType } from 'src/app/modules/shared/resolvers/resolver.operation';",
      "import { Resolver } from 'type-graphql';",
      "",
      "import { inject, provide } from '../../../../ioc/container';",
      "import { Permissions } from '../../../users/services/authorization/permissions';",
      "import { $1 } from '../../domain/models/$2';",
      "import { $1Service } from '../../services';",
      "import { $1CreateInput } from './input/$2.create.input';",
      "import { $1UpdateInput } from './input/$2.update.input';",
      "",
      "@crud($1, $1Service, [",
      "  { type: ResolverOperationType.Create, inputType: $1CreateInput, permissions: [Permissions.Create$1] },",
      "  { type: ResolverOperationType.Retrieve, isPublic: true },",
      "  { type: ResolverOperationType.Update, inputType: $1UpdateInput, permissions: [Permissions.Update$1] },",
      "  { type: ResolverOperationType.Delete, permissions: [Permissions.Delete$1] }",
      "])",
      "@provide($1Resolver)",
      "@Resolver($1)",
      "export class $1Resolver {",
      "  constructor(@inject($1Service) public $2Service: $1Service) {}",
      "}",
      ""
    ],
    "description": "Resolver | BE @anaisdigital"
  },
  "Resolver Translatable | BE @anaisdigital": {
    "prefix": "ks-resolver-translatable",
    "body": [
      "import { translatableCrud } from 'src/app/graphql/translatable.crud';",
      "import { ResolverOperationType } from 'src/app/modules/shared/resolvers/resolver.operation';",
      "import { FieldResolver, Resolver, Root } from 'type-graphql';",
      "",
      "import { inject, provide } from '../../../../ioc/container';",
      "import { Translation } from '../../../shared/models/translation';",
      "import { Permissions } from '../../../users/services/authorization/permissions';",
      "import { $1 } from '../../domain/models/$2';",
      "import { $1Service } from '../../services/$2.service';",
      "import { $1CreateInput } from './input/$2.create.input';",
      "import { $1UpdateInput } from './input/$2.update.input';",
      "",
      "@translatableCrud($1, $1Service, [",
      "  {",
      "    type: ResolverOperationType.Create,",
      "    inputType: $1CreateInput,",
      "    permissions: [Permissions.Create$1]",
      "  },",
      "  { type: ResolverOperationType.Retrieve, permissions: [Permissions.Retrieve$1] },",
      "  {",
      "    type: ResolverOperationType.Update,",
      "    inputType: $1UpdateInput,",
      "    permissions: [Permissions.Update$1]",
      "  },",
      "  { type: ResolverOperationType.Delete, permissions: [Permissions.Delete$1] },",
      "  { type: ResolverOperationType.DeleteTranslations, permissions: [Permissions.Delete$1] }",
      "])",
      "@provide($1Resolver)",
      "@Resolver($1)",
      "export class $1Resolver {",
      "  constructor(@inject($1Service) public $2Service: $1Service) {}",
      "",
      "  @FieldResolver()",
      "  public async translations(@Root() $2: $1): Promise<Translation[]> {",
      "    return this.$2Service.getTranslations($2._id as any);",
      "  }",
      "}",
      ""
    ],
    "description": "Resolver Translatable | BE @anaisdigital"
  },
  "Service | BE @anaisdigital": {
    "prefix": "ks-be-service",
    "body": [
      "import { inject, provide } from '../../../ioc/container';",
      "import { IEntityMapper } from '../../shared/mappers/ientity.mapper';",
      "import { BaseService } from '../../shared/resolvers/base.service';",
      "import { $1Mapper } from '../domain/mappers/$2.mapper';",
      "import { $1 } from '../domain/models/$2';",
      "",
      "@provide($1Service)",
      "export class $1Service extends BaseService<$1> {",
      "  constructor(@inject($1Mapper) protected mapper: IEntityMapper<$1> & $1Mapper) {",
      "    super();",
      "  }",
      "}",
      ""
    ],
    "description": "Service | BE @anaisdigital"
  },
  "Service Multilanguage | BE @anaisdigital": {
    "prefix": "ks-be-service-multilanguage",
    "body": [
      "import { inject, provide } from '../../../ioc/container';",
      "import { IMultiLanguageMapper } from '../../shared/mappers/imulti-language.mapper';",
      "import { MultiLanguageService } from '../../shared/resolvers/multi-language.service';",
      "import { $1Mapper } from '../domain/mappers/$2.mapper';",
      "import { $1 } from '../domain/models/$2';",
      "",
      "@provide($1Service)",
      "export class $1Service extends MultiLanguageService<$1> {",
      "  constructor(@inject($1Mapper) protected mapper: IMultiLanguageMapper<$1> & $1Mapper) {",
      "    super();",
      "  }",
      "}",
      ""
    ],
    "description": "Service Multilanguage | BE @anaisdigital"
  },
  "Mapper | BE @anaisdigital": {
    "prefix": "ks-be-mapper",
    "body": [
      "import { provide } from '../../../../ioc/container';",
      "import { BaseMapper } from '../../../shared/mappers/base.mapper';",
      "import { $1 } from '../models/$2';",
      "",
      "@provide($1Mapper)",
      "export class $1Mapper extends BaseMapper<$1> {",
      "  protected model: typeof $1 = $1;",
      "}",
      ""
    ],
    "description": "Mapper | BE @anaisdigital"
  },
  "Mapper MultiLanguage | BE @anaisdigital": {
    "prefix": "ks-be-mapper-multilanguage",
    "body": [
      "import { provide } from '../../../../ioc/container';",
      "import { MultiLanguageMapper } from '../../../shared/mappers/multi-language.mapper';",
      "import { $1 } from '../models/$2';",
      "",
      "@provide($1Mapper)",
      "export class $1Mapper extends MultiLanguageMapper<$1> {",
      "  protected model: typeof $1 = $1;",
      "}",
      ""
    ],
    "description": "Mapper MultiLanguage | BE @anaisdigital"
  },
  "Service | FE @anaisdigital": {
    "prefix": "ks-fe-service",
    "body": [
      "import gql from 'graphql-tag';",
      "",
      "import { Injectable } from '@angular/core';",
      "",
      "import { CrudService } from '../../../shared/services/crud/crud.service';",
      "import { $1 } from './$2';",
      "import { $1CreateInput } from './$2.create.input';",
      "import { $1UpdateInput } from './$2.update.input';",
      "",
      "@Injectable()",
      "export class $1Service extends CrudService<$1, $1CreateInput, $1UpdateInput> {",
      "  public fragment: any;",
      "  public modelName: string = '$1';",
      "",
      "  constructor() {",
      "    super();",
      "    this.setFragment();",
      "  }",
      "",
      "  public setFragment(fragment?: any): void {",
      "    this.fragment =",
      "      fragment ||",
      "      gql`",
      "        fragment fields on $1 {",
      "          _id",
      "        }",
      "      `;",
      "  }",
      "}",
      ""
    ],
    "description": "Service | FE @anaisdigital"
  },
  "Service Translatable | FE @anaisdigital": {
    "prefix": "ks-fe-service-translatable",
    "body": [
      "import gql from 'graphql-tag';",
      "",
      "import { Injectable } from '@angular/core';",
      "",
      "import {",
      "    TranslatableCrudService",
      "} from '../../../multilanguage/services/translatable-crud/translatable-crud.service';",
      "import { $1 } from './$2';",
      "import { $1CreateInput } from './$2.create.input';",
      "import { $1UpdateInput } from './$2.update.input';",
      "",
      "@Injectable()",
      "export class $1Service extends TranslatableCrudService<$1, $1CreateInput, $1UpdateInput> {",
      "  public fragment: any;",
      "  public modelName: string = '$1';",
      "",
      "  constructor() {",
      "    super();",
      "    this.setFragment();",
      "  }",
      "",
      "  public setFragment(fragment?: any): void {",
      "    this.fragment =",
      "      fragment ||",
      "      gql`",
      "        fragment fields on $1 {",
      "          _id",
      "        }",
      "      `;",
      "  }",
      "}",
      ""
    ],
    "description": "Service Translatable | FE @anaisdigital"
  },
  "Store List | FE @anaisdigital": {
    "prefix": "ks-store-list",
    "body": [
      "import { observable } from 'mobx';",
      "",
      "import { Injectable } from '@angular/core';",
      "",
      "import { Collection } from '../../../../../shared/domain/collection';",
      "import { PaginationInput } from '../../../../../shared/shared.interfaces';",
      "import { BaseListStore } from '../../../../../shared/stores/base-list/base-list.store';",
      "import {",
      "    $1, $1CreateInput, $1Service, $1UpdateInput",
      "} from '../../../../domain/$2';",
      "",
      "@Injectable()",
      "export class ListCategoriesStore extends BaseListStore<$1, $1CreateInput, $1UpdateInput> {",
      "  @observable",
      "  public collection: Collection<$1> = new Collection<$1>();",
      "",
      "  @observable",
      "  public filteredCollection: Collection<$1> = new Collection<$1>();",
      "",
      "  public pagination: PaginationInput = {",
      "    page: 0,",
      "    perPage: 10,",
      "    sizeOptions: [5, 10, 20, 50]",
      "  };",
      "",
      "  constructor(protected service: $1Service) {",
      "    super(service);",
      "  }",
      "}",
      ""
    ],
    "description": "Store List | FE @anaisdigital"
  },
  "Store Dialog | FE @anaisdigital": {
    "prefix": "ks-store-dialog",
    "body": [
      "import { observable } from 'mobx';",
      "",
      "import { Injectable } from '@angular/core';",
      "",
      "import {",
      "    BaseItemTranslatableStore",
      "} from '../../../../../../multilanguage/stores/base-item-translatable/base-item-translatable.store';",
      "import { Collection } from '../../../../../../shared/domain/collection';",
      "import {",
      "    $1, $1CreateInput, $1Service, $1UpdateInput",
      "} from '../../../../../domain/$2';",
      "",
      "@Injectable()",
      "export class $1DialogStore extends BaseItemTranslatableStore<$1, $1CreateInput, $1UpdateInput> {",
      "  @observable",
      "  public item: $1 = new $1();",
      "",
      "  @observable",
      "  public $2Collection: Collection<$1> = new Collection<$1>();",
      "",
      "  constructor(protected service: $1Service) {",
      "    super(service);",
      "  }",
      "}",
      ""
    ],
    "description": "Store Dialog | FE @anaisdigital"
  },
  "Model | BE @anaisdigital": {
    "prefix": "ks-be-model",
    "body": [
      "import { Types } from 'mongoose';",
      "import { Field, ID, ObjectType } from 'type-graphql';",
      "import { prop, Typegoose } from 'typegoose';",
      "",
      "@ObjectType()",
      "export class $1 extends Typegoose {",
      "  @Field(type => ID)",
      "  @prop()",
      "  public _id: Types.ObjectId;",
      "}",
      ""
    ],
    "description": "Model | BE @anaisdigital"
  },
  "Model MultiLanguage | BE @anaisdigital": {
    "prefix": "ks-be-model-multilanguage",
    "body": [
      "import { Types } from 'mongoose';",
      "import { MultiLanguageModel } from 'src/app/modules/shared/models/multi-language.model';",
      "import { Field, ID, ObjectType } from 'type-graphql';",
      "import { prop } from 'typegoose';",
      "",
      "@ObjectType()",
      "export class $1 extends MultiLanguageModel {",
      "  @Field(type => ID)",
      "  @prop()",
      "  public _id: Types.ObjectId;",
      "}",
      ""
    ],
    "description": "Model MultiLanguage | BE @anaisdigital"
  },
  "Table Config | FE @anaisdigital": {
    "prefix": "ks-table-config",
    "body": [
      "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';",
      "import { MatDialog } from '@angular/material';",
      "",
      "import { animations } from '../../../../../../../style/animations';",
      "import {",
      "    IAdminListTableConfig",
      "} from '../../../../../generic-table/admin-list-table/admin-list-table-config.interface';",
      "import { Permissions } from '../../../../../user/user.enums';",
      "import { $1 } from '../../../../blog.models';",
      "import { $1DialogComponent } from './$2-dialog/$2-dialog.component';",
      "import { List$1sStore } from './list-$2s.store';",
      "",
      "@Component({",
      "  selector: 'anais-list-$2s',",
      "  templateUrl: './list-$2s.component.html',",
      "  styleUrls: ['./list-$2s.component.scss', '../../../../../shared/helpers/table-styles.scss'],",
      "  changeDetection: ChangeDetectionStrategy.OnPush,",
      "  animations",
      "})",
      "export class List$1sComponent implements OnInit {",
      "  public Permissions: typeof Permissions = Permissions;",
      "  public config: IAdminListTableConfig;",
      "  public displayedColumns: string[] = ['checkbox', '$4', 'buttons'];",
      "",
      "  constructor(public store: List$1sStore, public dialog: MatDialog) {}",
      "",
      "  public async ngOnInit(): Promise<void> {",
      "    this.setConfig();",
      "  }",
      "",
      "  protected buildData($2?: $1): any {",
      "    const entity = Object.assign(new $1(), $2 ? {} : {});",
      "    return { entity, toUpdate: !!$2 };",
      "  }",
      "",
      "  private setFields(): void {",
      "    this.store.collection.items.forEach($2 => {});",
      "  }",
      "",
      "  private get permissions(): { [action: string]: string[] } {",
      "    return {",
      "      create: [this.Permissions.Create$1],",
      "      update: [this.Permissions.Update$1],",
      "      delete: [this.Permissions.Delete$1]",
      "    };",
      "  }",
      "",
      "  private setConfig(): void {",
      "    this.config = {",
      "      context: '$3',",
      "      icon: '$2',",
      "      displayedColumns: this.displayedColumns,",
      "      store: this.store,",
      "      columns: {",
      "        $4: {",
      "          label: '',",
      "          sort: true,",
      "          hasPropertyValue: true",
      "        }",
      "      },",
      "      dialogService: this.dialog,",
      "      dialogComponent: $1DialogComponent,",
      "      buildData: this.buildData.bind(this),",
      "      permissions: this.permissions,",
      "      modalWidth: '$5vw',",
      "      hasBulkActions: true",
      "      // OPTIONAL",
      "      // bulkActions: {",
      "      //   method: ($2: $1) => this.customMethod($2),",
      "      //   icon: '',",
      "      //   // OPTIONAL",
      "      //   permissions: [],",
      "      //   label: '',",
      "      //   class: ''",
      "      // },",
      "      // rowActions: {",
      "      //   block: {",
      "      //     icon: '',",
      "      //     method: ($2: $1) => this.customMethod($2),",
      "      //     tooltip: ''",
      "      //     // OPTIONAL",
      "      //     condition: ($2: $1) => this.customCondition();",
      "      //     class: '',",
      "      //     permissions: [],",
      "      //     shouldRefresh: true",
      "      //   }",
      "      // },",
      "      // processData: this.setFields.bind(this),",
      "      // hasGeneralSearch: true,",
      "      // hasDynamicColumns: true,",
      "      // customTitle: '',",
      "      // customCSS: ''",
      "    };",
      "  }",
      "}",
      ""
    ],
    "description": "Table Config | FE @anaisdigital"
  }
}
